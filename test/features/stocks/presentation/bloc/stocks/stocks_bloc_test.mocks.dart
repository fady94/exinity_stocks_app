// Mocks generated by Mockito 5.4.4 from annotations
// in exinity_app/test/features/stocks/presentation/bloc/stocks/stocks_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:exinity_app/const/enums.dart' as _i8;
import 'package:exinity_app/core/errors/failures.dart' as _i6;
import 'package:exinity_app/features/stocks/domain/entities/stock_entity.dart'
    as _i7;
import 'package:exinity_app/features/stocks/domain/repositories/stock_repository.dart'
    as _i2;
import 'package:exinity_app/features/stocks/domain/usecases/get_selected_stocks_data_use_case.dart'
    as _i4;
import 'package:exinity_app/features/stocks/domain/usecases/stock_update_recieved_use_case.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStockRepository_0 extends _i1.SmartFake
    implements _i2.StockRepository {
  _FakeStockRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetSelectedStocksDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSelectedStocksDataUseCase extends _i1.Mock
    implements _i4.GetSelectedStocksDataUseCase {
  MockGetSelectedStocksDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StockRepository get stockRepository => (super.noSuchMethod(
        Invocation.getter(#stockRepository),
        returnValue: _FakeStockRepository_0(
          this,
          Invocation.getter(#stockRepository),
        ),
      ) as _i2.StockRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.StockEntity>>> call(
          _i8.StockType? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.StockEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.StockEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.StockEntity>>>);
}

/// A class which mocks [StockUpdateRecievedUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockUpdateRecievedUseCase extends _i1.Mock
    implements _i9.StockUpdateRecievedUseCase {
  MockStockUpdateRecievedUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StockRepository get stockRepository => (super.noSuchMethod(
        Invocation.getter(#stockRepository),
        returnValue: _FakeStockRepository_0(
          this,
          Invocation.getter(#stockRepository),
        ),
      ) as _i2.StockRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.StockEntity>>> call(
          _i9.StockUpdateRecievedUseCaseParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.StockEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.StockEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.StockEntity>>>);
}
