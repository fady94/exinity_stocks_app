// Mocks generated by Mockito 5.4.4 from annotations
// in exinity_app/test/features/stocks/presentation/pages/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:bloc/bloc.dart' as _i7;
import 'package:exinity_app/const/enums.dart' as _i11;
import 'package:exinity_app/core/network/cubit/connectivity_cubit.dart' as _i2;
import 'package:exinity_app/core/services/websocket/bloc/websocket_bloc.dart'
    as _i8;
import 'package:exinity_app/core/services/websocket/web_socket_service.dart'
    as _i3;
import 'package:exinity_app/features/stocks/domain/entities/stock_entity.dart'
    as _i12;
import 'package:exinity_app/features/stocks/domain/usecases/get_selected_stocks_data_use_case.dart'
    as _i4;
import 'package:exinity_app/features/stocks/domain/usecases/stock_update_recieved_use_case.dart'
    as _i5;
import 'package:exinity_app/features/stocks/presentation/bloc/stocks/stocks_bloc.dart'
    as _i13;
import 'package:exinity_app/features/stocks/presentation/bloc/stocks/stocks_bloc_impl.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectivityState_0 extends _i1.SmartFake
    implements _i2.ConnectivityState {
  _FakeConnectivityState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebSocketService_1 extends _i1.SmartFake
    implements _i3.WebSocketService {
  _FakeWebSocketService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetSelectedStocksDataUseCase_2 extends _i1.SmartFake
    implements _i4.GetSelectedStocksDataUseCase {
  _FakeGetSelectedStocksDataUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStockUpdateRecievedUseCase_3 extends _i1.SmartFake
    implements _i5.StockUpdateRecievedUseCase {
  _FakeStockUpdateRecievedUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConnectivityCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityCubit extends _i1.Mock implements _i2.ConnectivityCubit {
  MockConnectivityCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ConnectivityState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeConnectivityState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.ConnectivityState);

  @override
  _i6.Stream<_i2.ConnectivityState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i2.ConnectivityState>.empty(),
      ) as _i6.Stream<_i2.ConnectivityState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void emit(_i2.ConnectivityState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i2.ConnectivityState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [WebsocketBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebsocketBloc extends _i1.Mock implements _i8.WebsocketBloc {
  MockWebsocketBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WebSocketService get webSocketService => (super.noSuchMethod(
        Invocation.getter(#webSocketService),
        returnValue: _FakeWebSocketService_1(
          this,
          Invocation.getter(#webSocketService),
        ),
      ) as _i3.WebSocketService);

  @override
  _i8.WebsocketState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i9.dummyValue<_i8.WebsocketState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.WebsocketState);

  @override
  _i6.Stream<_i8.WebsocketState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i8.WebsocketState>.empty(),
      ) as _i6.Stream<_i8.WebsocketState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i8.WebsocketEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i8.WebsocketEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i8.WebsocketState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i8.WebsocketEvent>(
    _i7.EventHandler<E, _i8.WebsocketState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i7.Transition<_i8.WebsocketEvent, _i8.WebsocketState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChange(_i7.Change<_i8.WebsocketState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PopularStocksBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularStocksBloc extends _i1.Mock implements _i10.PopularStocksBloc {
  MockPopularStocksBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetSelectedStocksDataUseCase get getSelectedSymbolsDataUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getSelectedSymbolsDataUseCase),
        returnValue: _FakeGetSelectedStocksDataUseCase_2(
          this,
          Invocation.getter(#getSelectedSymbolsDataUseCase),
        ),
      ) as _i4.GetSelectedStocksDataUseCase);

  @override
  _i5.StockUpdateRecievedUseCase get stockUpdateRecievedUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#stockUpdateRecievedUseCase),
        returnValue: _FakeStockUpdateRecievedUseCase_3(
          this,
          Invocation.getter(#stockUpdateRecievedUseCase),
        ),
      ) as _i5.StockUpdateRecievedUseCase);

  @override
  _i11.StockType get stockType => (super.noSuchMethod(
        Invocation.getter(#stockType),
        returnValue: _i11.StockType.popular,
      ) as _i11.StockType);

  @override
  List<_i12.StockEntity> get savedStocks => (super.noSuchMethod(
        Invocation.getter(#savedStocks),
        returnValue: <_i12.StockEntity>[],
      ) as List<_i12.StockEntity>);

  @override
  set savedStocks(List<_i12.StockEntity>? _savedStocks) => super.noSuchMethod(
        Invocation.setter(
          #savedStocks,
          _savedStocks,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get selectedSymbols => (super.noSuchMethod(
        Invocation.getter(#selectedSymbols),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set selectedSymbols(List<String>? _selectedSymbols) => super.noSuchMethod(
        Invocation.setter(
          #selectedSymbols,
          _selectedSymbols,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.StocksState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i9.dummyValue<_i13.StocksState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i13.StocksState);

  @override
  _i6.Stream<_i13.StocksState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i13.StocksState>.empty(),
      ) as _i6.Stream<_i13.StocksState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i13.StocksEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i13.StocksEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i13.StocksState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i13.StocksEvent>(
    _i7.EventHandler<E, _i13.StocksState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i7.Transition<_i13.StocksEvent, _i13.StocksState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChange(_i7.Change<_i13.StocksState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
