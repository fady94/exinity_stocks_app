// Mocks generated by Mockito 5.4.4 from annotations
// in exinity_app/test/features/stocks/domain/usecases/get_selected_stocks_data_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:exinity_app/const/enums.dart' as _i9;
import 'package:exinity_app/core/errors/failures.dart' as _i5;
import 'package:exinity_app/features/stocks/data/models/stock_api_model.dart'
    as _i7;
import 'package:exinity_app/features/stocks/domain/entities/stock_entity.dart'
    as _i8;
import 'package:exinity_app/features/stocks/domain/repositories/stock_repository.dart'
    as _i3;
import 'package:exinity_app/shared/domain/entities/symbol_entity.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StockRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockRepository extends _i1.Mock implements _i3.StockRepository {
  MockStockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.SymbolEntity>>> getAllSymbols() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSymbols,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.SymbolEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.SymbolEntity>>(
          this,
          Invocation.method(
            #getAllSymbols,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.SymbolEntity>>>);

  @override
  _i2.Either<_i5.Failure, List<String>> getWatchlist() => (super.noSuchMethod(
        Invocation.method(
          #getWatchlist,
          [],
        ),
        returnValue: _FakeEither_0<_i5.Failure, List<String>>(
          this,
          Invocation.method(
            #getWatchlist,
            [],
          ),
        ),
      ) as _i2.Either<_i5.Failure, List<String>>);

  @override
  _i2.Either<_i5.Failure, bool> addToWatchlist(String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToWatchlist,
          [symbol],
        ),
        returnValue: _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #addToWatchlist,
            [symbol],
          ),
        ),
      ) as _i2.Either<_i5.Failure, bool>);

  @override
  _i2.Either<_i5.Failure, bool> removeFromWatchlist(String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromWatchlist,
          [symbol],
        ),
        returnValue: _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #removeFromWatchlist,
            [symbol],
          ),
        ),
      ) as _i2.Either<_i5.Failure, bool>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.StockApiModel>> getStockInfo(
          String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStockInfo,
          [symbol],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i7.StockApiModel>>.value(
                _FakeEither_0<_i5.Failure, _i7.StockApiModel>(
          this,
          Invocation.method(
            #getStockInfo,
            [symbol],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.StockApiModel>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.SymbolEntity>>> search(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.SymbolEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.SymbolEntity>>(
          this,
          Invocation.method(
            #search,
            [query],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.SymbolEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.StockEntity>>>
      getSelectedStocksData(_i9.StockType? stockType) => (super.noSuchMethod(
            Invocation.method(
              #getSelectedStocksData,
              [stockType],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i8.StockEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.StockEntity>>(
              this,
              Invocation.method(
                #getSelectedStocksData,
                [stockType],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.StockEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.StockEntity>>>
      updateSelectedStocksPrice({
    required List<_i8.StockEntity>? stocksList,
    required dynamic dataReceived,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #updateSelectedStocksPrice,
              [],
              {
                #stocksList: stocksList,
                #dataReceived: dataReceived,
              },
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i8.StockEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.StockEntity>>(
              this,
              Invocation.method(
                #updateSelectedStocksPrice,
                [],
                {
                  #stocksList: stocksList,
                  #dataReceived: dataReceived,
                },
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.StockEntity>>>);
}
