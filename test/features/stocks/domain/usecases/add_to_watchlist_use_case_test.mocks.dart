// Mocks generated by Mockito 5.4.4 from annotations
// in exinity_app/test/features/stocks/domain/usecases/add_to_watchlist_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:dartz/dartz.dart' as _i8;
import 'package:exinity_app/const/enums.dart' as _i15;
import 'package:exinity_app/core/errors/failures.dart' as _i13;
import 'package:exinity_app/core/network/network_info.dart' as _i5;
import 'package:exinity_app/core/services/websocket/web_socket_service.dart'
    as _i6;
import 'package:exinity_app/features/stocks/data/datasources/stock_api_remote_data_source.dart'
    as _i2;
import 'package:exinity_app/features/stocks/data/datasources/stock_websocket_remote_data_sourc.dart'
    as _i4;
import 'package:exinity_app/features/stocks/data/datasources/symbols_remote_data_source.dart'
    as _i3;
import 'package:exinity_app/features/stocks/data/datasources/watchlist_local_data_source.dart'
    as _i7;
import 'package:exinity_app/features/stocks/data/models/stock_api_model.dart'
    as _i14;
import 'package:exinity_app/features/stocks/data/repositories/stock_repository_impl.dart'
    as _i9;
import 'package:exinity_app/features/stocks/domain/entities/stock_entity.dart'
    as _i11;
import 'package:exinity_app/shared/domain/entities/symbol_entity.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStockApiRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.StockApiRemoteDataSource {
  _FakeStockApiRemoteDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSymbolsRemoteDataSource_1 extends _i1.SmartFake
    implements _i3.SymbolsRemoteDataSource {
  _FakeSymbolsRemoteDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStockWebsocketRemoteDataSource_2 extends _i1.SmartFake
    implements _i4.StockWebsocketRemoteDataSource {
  _FakeStockWebsocketRemoteDataSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfo_3 extends _i1.SmartFake implements _i5.NetworkInfo {
  _FakeNetworkInfo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebSocketService_4 extends _i1.SmartFake
    implements _i6.WebSocketService {
  _FakeWebSocketService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWatchlistLocalDataSource_5 extends _i1.SmartFake
    implements _i7.WatchlistLocalDataSource {
  _FakeWatchlistLocalDataSource_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_6<L, R> extends _i1.SmartFake implements _i8.Either<L, R> {
  _FakeEither_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StockRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockRepositoryImpl extends _i1.Mock
    implements _i9.StockRepositoryImpl {
  MockStockRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StockApiRemoteDataSource get stockApiRemoteDataSource =>
      (super.noSuchMethod(
        Invocation.getter(#stockApiRemoteDataSource),
        returnValue: _FakeStockApiRemoteDataSource_0(
          this,
          Invocation.getter(#stockApiRemoteDataSource),
        ),
      ) as _i2.StockApiRemoteDataSource);

  @override
  _i3.SymbolsRemoteDataSource get symbolsRemoteDataSource =>
      (super.noSuchMethod(
        Invocation.getter(#symbolsRemoteDataSource),
        returnValue: _FakeSymbolsRemoteDataSource_1(
          this,
          Invocation.getter(#symbolsRemoteDataSource),
        ),
      ) as _i3.SymbolsRemoteDataSource);

  @override
  _i4.StockWebsocketRemoteDataSource get stockWebsocketRemoteDataSource =>
      (super.noSuchMethod(
        Invocation.getter(#stockWebsocketRemoteDataSource),
        returnValue: _FakeStockWebsocketRemoteDataSource_2(
          this,
          Invocation.getter(#stockWebsocketRemoteDataSource),
        ),
      ) as _i4.StockWebsocketRemoteDataSource);

  @override
  _i5.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_3(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i5.NetworkInfo);

  @override
  _i6.WebSocketService get webSocketService => (super.noSuchMethod(
        Invocation.getter(#webSocketService),
        returnValue: _FakeWebSocketService_4(
          this,
          Invocation.getter(#webSocketService),
        ),
      ) as _i6.WebSocketService);

  @override
  _i7.WatchlistLocalDataSource get watchListLocalDataSource =>
      (super.noSuchMethod(
        Invocation.getter(#watchListLocalDataSource),
        returnValue: _FakeWatchlistLocalDataSource_5(
          this,
          Invocation.getter(#watchListLocalDataSource),
        ),
      ) as _i7.WatchlistLocalDataSource);

  @override
  List<_i10.SymbolEntity> get allSymbols => (super.noSuchMethod(
        Invocation.getter(#allSymbols),
        returnValue: <_i10.SymbolEntity>[],
      ) as List<_i10.SymbolEntity>);

  @override
  set allSymbols(List<_i10.SymbolEntity>? _allSymbols) => super.noSuchMethod(
        Invocation.setter(
          #allSymbols,
          _allSymbols,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i11.StockEntity> get cachedStocks => (super.noSuchMethod(
        Invocation.getter(#cachedStocks),
        returnValue: <_i11.StockEntity>[],
      ) as List<_i11.StockEntity>);

  @override
  set cachedStocks(List<_i11.StockEntity>? _cachedStocks) => super.noSuchMethod(
        Invocation.setter(
          #cachedStocks,
          _cachedStocks,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get watchlistSymbols => (super.noSuchMethod(
        Invocation.getter(#watchlistSymbols),
        returnValue: <String>[],
      ) as List<String>);

  @override
  set watchlistSymbols(List<String>? _watchlistSymbols) => super.noSuchMethod(
        Invocation.setter(
          #watchlistSymbols,
          _watchlistSymbols,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i8.Either<_i13.Failure, List<_i10.SymbolEntity>>>
      getAllSymbols() => (super.noSuchMethod(
            Invocation.method(
              #getAllSymbols,
              [],
            ),
            returnValue: _i12.Future<
                    _i8.Either<_i13.Failure, List<_i10.SymbolEntity>>>.value(
                _FakeEither_6<_i13.Failure, List<_i10.SymbolEntity>>(
              this,
              Invocation.method(
                #getAllSymbols,
                [],
              ),
            )),
          ) as _i12.Future<_i8.Either<_i13.Failure, List<_i10.SymbolEntity>>>);

  @override
  _i8.Either<_i13.Failure, List<String>> getWatchlist() => (super.noSuchMethod(
        Invocation.method(
          #getWatchlist,
          [],
        ),
        returnValue: _FakeEither_6<_i13.Failure, List<String>>(
          this,
          Invocation.method(
            #getWatchlist,
            [],
          ),
        ),
      ) as _i8.Either<_i13.Failure, List<String>>);

  @override
  _i8.Either<_i13.Failure, bool> addToWatchlist(String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToWatchlist,
          [symbol],
        ),
        returnValue: _FakeEither_6<_i13.Failure, bool>(
          this,
          Invocation.method(
            #addToWatchlist,
            [symbol],
          ),
        ),
      ) as _i8.Either<_i13.Failure, bool>);

  @override
  _i8.Either<_i13.Failure, bool> removeFromWatchlist(String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromWatchlist,
          [symbol],
        ),
        returnValue: _FakeEither_6<_i13.Failure, bool>(
          this,
          Invocation.method(
            #removeFromWatchlist,
            [symbol],
          ),
        ),
      ) as _i8.Either<_i13.Failure, bool>);

  @override
  _i12.Future<_i8.Either<_i13.Failure, _i14.StockApiModel>> getStockInfo(
          String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStockInfo,
          [symbol],
        ),
        returnValue:
            _i12.Future<_i8.Either<_i13.Failure, _i14.StockApiModel>>.value(
                _FakeEither_6<_i13.Failure, _i14.StockApiModel>(
          this,
          Invocation.method(
            #getStockInfo,
            [symbol],
          ),
        )),
      ) as _i12.Future<_i8.Either<_i13.Failure, _i14.StockApiModel>>);

  @override
  _i12.Future<_i8.Either<_i13.Failure, List<_i11.StockEntity>>>
      getSelectedStocksData(_i15.StockType? stockType) => (super.noSuchMethod(
            Invocation.method(
              #getSelectedStocksData,
              [stockType],
            ),
            returnValue: _i12
                .Future<_i8.Either<_i13.Failure, List<_i11.StockEntity>>>.value(
                _FakeEither_6<_i13.Failure, List<_i11.StockEntity>>(
              this,
              Invocation.method(
                #getSelectedStocksData,
                [stockType],
              ),
            )),
          ) as _i12.Future<_i8.Either<_i13.Failure, List<_i11.StockEntity>>>);

  @override
  _i12.Future<_i8.Either<_i13.Failure, List<_i11.StockEntity>>>
      updateSelectedStocksPrice({
    required dynamic dataReceived,
    required List<_i11.StockEntity>? stocksList,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #updateSelectedStocksPrice,
              [],
              {
                #dataReceived: dataReceived,
                #stocksList: stocksList,
              },
            ),
            returnValue: _i12
                .Future<_i8.Either<_i13.Failure, List<_i11.StockEntity>>>.value(
                _FakeEither_6<_i13.Failure, List<_i11.StockEntity>>(
              this,
              Invocation.method(
                #updateSelectedStocksPrice,
                [],
                {
                  #dataReceived: dataReceived,
                  #stocksList: stocksList,
                },
              ),
            )),
          ) as _i12.Future<_i8.Either<_i13.Failure, List<_i11.StockEntity>>>);

  @override
  _i12.Future<_i8.Either<_i13.Failure, List<_i10.SymbolEntity>>> search(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue: _i12
            .Future<_i8.Either<_i13.Failure, List<_i10.SymbolEntity>>>.value(
            _FakeEither_6<_i13.Failure, List<_i10.SymbolEntity>>(
          this,
          Invocation.method(
            #search,
            [query],
          ),
        )),
      ) as _i12.Future<_i8.Either<_i13.Failure, List<_i10.SymbolEntity>>>);
}
